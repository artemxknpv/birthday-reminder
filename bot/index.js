function bot() {
  const { Telegraf } = require('telegraf');
  const Student = require('../models/students');
  const mongoose = require('mongoose');
  const bot = new Telegraf(process.env.BOT_TOKEN);
  require('dotenv').config();

  const { CronJob } = require('cron');
  const { setMaxListeners } = require('../app');

  let globalCtx;
  let jobMorning = new CronJob(
    '35 * * * * *',
    async function () {
      today().then((data) => {
        if (data.length) {
          data.forEach((element) => {
            if (!globalCtx) {
              return;
            }
            globalCtx.reply(
              `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${
                element.lastName
              } —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –õ–æ–∫–∞—Ü–∏—è: ${
                element.typeBootCamp === 'moscow'
                  ? '–ú–æ—Å–∫–≤–∞'
                  : element.typeBootCamp === 'spb'
                  ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
                  : '–û–Ω–ª–∞–π–Ω'
              }.`
            );
          });
        } else {
          globalCtx.reply('–°–µ–≥–æ–¥–Ω—è –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è');
        }
      });
    },
    null,
    true,
    'Europe/Moscow'
  );

  let jobEvening = new CronJob(
    '50 * * * * *',
    async function () {
      tomorrow().then((data) => {
        if (data.length) {
          data.forEach((element) => {
            globalCtx.reply(
              `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${
                element.lastName
              } –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –õ–æ–∫–∞—Ü–∏—è: ${
                element.typeBootCamp === 'moscow'
                  ? '–ú–æ—Å–∫–≤–∞'
                  : element.typeBootCamp === 'spb'
                  ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
                  : '–û–Ω–ª–∞–π–Ω'
              }.`
            );
          });
        } else {
          globalCtx.reply('–°–µ–≥–æ–¥–Ω—è –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è');
        }
      });
    },
    null,
    true,
    'Europe/Moscow'
  );

  mongoose.connect(process.env.MONGO_DB, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });

  const inlineKeyboardNotifications = Telegraf.Markup.inlineKeyboard([
    Telegraf.Markup.callbackButton('–î–∞ üíÉ', 'notify'),
    Telegraf.Markup.callbackButton('–ù–µ—Ç üôÖ‚Äç‚ôÇÔ∏è', 'nonotify'),
  ]).extra();

  bot.action('notify', async (ctx) => {
    globalCtx = ctx;
    await ctx.reply('–•–æ—Ä–æ—à–æ\n');
    await ctx.reply(
      '–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —á–∞—Å–æ–≤ —É—Ç—Ä–∞ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö —Å–µ–≥–æ–¥–Ω—è'
    );
    await ctx.reply(
      '–¢–∞–∫ –∂–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —á–∞—Å–æ–≤ –≤–µ—á–µ—Ä–∞ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö –∑–∞–≤—Ç—Ä–∞'
    );
    jobMorning.start();
    jobEvening.start();
  });

  bot.action('nonotify', (ctx) => {
    globalCtx = ctx;
    ctx.reply('–•–æ—Ä–æ—à–æ, –º—ã –Ω–µ –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
  });

  bot.start(async (ctx) => {
    await ctx.telegram.sendMessage(
      ctx.from.id,
      '–ü—Ä–∏–≤–µ—Ç, –ú–∞—à–∞! –¢—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?',
      inlineKeyboardNotifications
    );
    await ctx.reply(
      '–ù–∞–∂–º–∏ /help –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ù–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è',
      Telegraf.Markup.keyboard([
        ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞'],
        ['–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
        ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
        ['–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —É—á–µ–Ω–∏–∫–∞–º'],
      ])
        .oneTime()
        .resize()
        .extra()
    );
  });

  bot.hears('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', (ctx) => {
    if (jobMorning.running === true) {
      ctx.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');
    } else {
      ctx.reply('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã');
    }
  });

  bot.hears('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç—É', (ctx) => {
    ctx.reply('Button is working');
  });

  bot.hears('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', (ctx) => {
    if ((jobMorning.running === true) & (jobEvening.running === true)) {
      jobMorning.stop();
      jobEvening.stop();
    }
  });

  bot.hears('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', (ctx) => {
    if ((jobMorning.running === false) & (jobEvening.running === false)) {
      jobMorning.start();
      jobEvening.start();
    }
  });

  async function today() {
    let today = new Date().toDateString().split(' ');
    [todayMonth, todayDay] = [today[1], today[2]];
    let students = await Student.find();
    let studentsToday = await Promise.all(
      students.filter((student) => {
        let studentDate = student.dateOfBirth.toDateString().split(' ');
        [StudenttodayMonth, StudenttodayDay] = [studentDate[1], studentDate[2]];
        return todayMonth === StudenttodayMonth && todayDay === StudenttodayDay;
      })
    );
    return studentsToday;
  }

  async function tomorrow() {
    let tomorrow = new Date(
      Date.now() + 1000 * 60 * 60 * 24 + 1000 * 60 * 60 * 3
    )
      .toDateString()
      .split(' ');
    [tomorrowMonth, tomorrowDay] = [tomorrow[1], tomorrow[2]];
    let students = await Student.find();
    let studentsTomorrow = students.filter((student) => {
      let studentDate = student.dateOfBirth.toDateString().split(' ');
      [StudentTomorrowMonth, StudentTomorrowDay] = [
        studentDate[1],
        studentDate[2],
      ];
      return (
        tomorrowMonth === StudentTomorrowMonth &&
        tomorrowDay === StudentTomorrowDay
      );
    });
    return studentsTomorrow;
  }

  bot.help((ctx) =>
    ctx.reply(
      '–ú–∞—à–∞, –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ' +
        ' —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤' +
        ' —ç–ª—å–±—Ä—É—Å–∞!\n–ù–∞–∂–º–∏ today, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —É –∫–æ–≥–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è' +
        ' —Å–µ–≥–æ–¥–Ω—è.\n–ù–∞–∂–º–∏ tomorrow, —á—Ç–æ–± —É–∑–Ω–∞—Ç—å —É –∫–æ–≥–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞ \n' +
        '–¢–∞–∫–∂–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—É /start –¥–ª—è —Ç–æ–≥–æ,' +
        ' —á—Ç–æ–±—ã —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–≤–∞ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å'
    )
  );

  bot.hears('–°–µ–≥–æ–¥–Ω—è', async (ctx) => {
    let today = new Date().toDateString().split(' ');
    [todayMonth, todayDay] = [today[1], today[2]];
    let students = await Student.find();
    let studentsToday = students.filter((student) => {
      let studentDate = student.dateOfBirth.toDateString().split(' ');
      [StudenttodayMonth, StudenttodayDay] = [studentDate[1], studentDate[2]];
      return todayMonth === StudenttodayMonth && todayDay === StudenttodayDay;
    });
    if (studentsToday.length) {
      studentsToday.forEach((element) => {
        ctx.reply(
          `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${
            element.lastName
          } —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –õ–æ–∫–∞—Ü–∏—è: ${
            element.typeBootCamp === 'moscow'
              ? '–ú–æ—Å–∫–≤–∞'
              : element.typeBootCamp === 'spb'
              ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
              : '–û–Ω–ª–∞–π–Ω'
          }.`
        );
      });
    } else {
      await ctx.reply('–°–µ–≥–æ–¥–Ω—è –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è');
    }
  });

  bot.hears('–ó–∞–≤—Ç—Ä–∞', async (ctx) => {
    let tomorrow = new Date(
      Date.now() + 1000 * 60 * 60 * 24 + 1000 * 60 * 60 * 3
    )
      .toDateString()
      .split(' ');
    [tomorrowMonth, tomorrowDay] = [tomorrow[1], tomorrow[2]];
    let students = await Student.find();
    let studentsTomorrow = students.filter((student) => {
      let studentDate = student.dateOfBirth.toDateString().split(' ');
      [StudentTomorrowMonth, StudentTomorrowDay] = [
        studentDate[1],
        studentDate[2],
      ];
      return (
        tomorrowMonth === StudentTomorrowMonth &&
        tomorrowDay === StudentTomorrowDay
      );
    });
    if (studentsTomorrow.length) {
      studentsTomorrow.forEach((element) => {
        ctx.reply(
          `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${
            element.lastName
          } –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è \n –õ–æ–∫–∞—Ü–∏—è: ${
            element.typeBootCamp === 'moscow'
              ? '–ú–æ—Å–∫–≤–∞'
              : element.typeBootCamp === 'spb'
              ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
              : '–û–Ω–ª–∞–π–Ω'
          }.`
        );
      });
    } else {
      await ctx.reply('–ó–∞–≤—Ç—Ä–∞ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è');
    }
  });

  bot.on('sticker', (ctx) => ctx.reply('–û—á–µ–Ω—å –∫–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä'));

  bot.launch();
}

module.exports = bot;
