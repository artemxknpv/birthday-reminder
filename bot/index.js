const { Telegraf } = require("telegraf");
const Student = require("../models/students");
const mongoose = require("mongoose");
const bot = new Telegraf("986785690:AAH5awaR1tJANp-oGS4t_2vNJPJztioCkdI");

const { CronJob } = require("cron");

mongoose.connect("mongodb://localhost:27017/elbrusBirthday", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function today() {
  let today = new Date().toDateString().split(" ");
  [todayMonth, todayDay] = [today[1], today[2]];
  let students = await Student.find();
  let studentsToday = await Promise.all(
    students.filter((student) => {
      let studentDate = student.dateOfBirth.toDateString().split(" ");
      [StudenttodayMonth, StudenttodayDay] = [studentDate[1], studentDate[2]];
      return todayMonth === StudenttodayMonth && todayDay === StudenttodayDay;
    })
  );
  return studentsToday;
}

async function tomorrow() {
  let tomorrow = new Date(Date.now() + 1000 * 60 * 60 * 24 + 1000 * 60 * 60 * 3)
    .toDateString()
    .split(" ");
  [tomorrowMonth, tomorrowDay] = [tomorrow[1], tomorrow[2]];
  let students = await Student.find();
  let studentsTomorrow = students.filter((student) => {
    let studentDate = student.dateOfBirth.toDateString().split(" ");
    [StudentTomorrowMonth, StudentTomorrowDay] = [
      studentDate[1],
      studentDate[2],
    ];
    return (
      tomorrowMonth === StudentTomorrowMonth &&
      tomorrowDay === StudentTomorrowDay
    );
  });
  return studentsTomorrow;
}

bot.help((ctx) => ctx.reply("Send me a sticker"));
bot.start((ctx) => {
  // –£—Ç—Ä–µ–Ω–µ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–µ–≥–æ–¥–Ω—è
  // –≤—Ä–µ–º—è –Ω–∞–¥–æ –ø–æ–¥–∫—Ä—É—Ç–∏—Ç—å
  const jobMorning = new CronJob(
    "0 * * * * *",
    async function () {
      today().then((data) => {
        if (data.length) {
          data.forEach((element) => {
            ctx.reply(
              `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${
                element.lastName
              } —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –õ–æ–∫–∞—Ü–∏—è: ${
                element.typeBootCamp === "moscow"
                  ? "–ú–æ—Å–∫–≤–∞"
                  : element.typeBootCamp === "spb"
                  ? "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
                  : "–û–Ω–ª–∞–π–Ω"
              }.`
            );
          });
        } else {
          ctx.reply("–°–µ–≥–æ–¥–Ω—è –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è");
        }
      });
    },
    null,
    true,
    "Europe/Moscow"
  );
  jobMorning.start();

  const jobEvening = new CronJob(
    "5 * * * * *",
    async function () {
      tomorrow().then((data) => {
        if (data.length) {
          data.forEach((element) => {
            ctx.reply(
              `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${
                element.lastName
              } –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –õ–æ–∫–∞—Ü–∏—è: ${
                element.typeBootCamp === "moscow"
                  ? "–ú–æ—Å–∫–≤–∞"
                  : element.typeBootCamp === "spb"
                  ? "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
                  : "–û–Ω–ª–∞–π–Ω"
              }.`
            );
          });
        } else {
          ctx.reply("–°–µ–≥–æ–¥–Ω—è –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è");
        }
      });
    },
    null,
    true,
    "Europe/Moscow"
  );
  jobEvening.start();
});

bot.hears("today", async (ctx) => {
  let today = new Date().toDateString().split(" ");
  [todayMonth, todayDay] = [today[1], today[2]];
  let students = await Student.find();
  let studentsToday = students.filter((student) => {
    let studentDate = student.dateOfBirth.toDateString().split(" ");
    [StudenttodayMonth, StudenttodayDay] = [studentDate[1], studentDate[2]];
    return todayMonth === StudenttodayMonth && todayDay === StudenttodayDay;
  });
  if (studentsToday.length) {
    studentsToday.forEach((element) => {
      ctx.reply(
        `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${
          element.lastName
        } —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –õ–æ–∫–∞—Ü–∏—è: ${
          element.typeBootCamp === "moscow"
            ? "–ú–æ—Å–∫–≤–∞"
            : element.typeBootCamp === "spb"
            ? "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            : "–û–Ω–ª–∞–π–Ω"
        }.`
      );
    });
  } else {
    await ctx.reply("–°–µ–≥–æ–¥–Ω—è –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è");
  }
});

bot.hears("tomorrow", async (ctx) => {
  let tomorrow = new Date(Date.now() + 1000 * 60 * 60 * 24 + 1000 * 60 * 60 * 3)
    .toDateString()
    .split(" ");
  [tomorrowMonth, tomorrowDay] = [tomorrow[1], tomorrow[2]];
  let students = await Student.find();
  let studentsTomorrow = students.filter((student) => {
    let studentDate = student.dateOfBirth.toDateString().split(" ");
    [StudentTomorrowMonth, StudentTomorrowDay] = [
      studentDate[1],
      studentDate[2],
    ];
    return (
      tomorrowMonth === StudentTomorrowMonth &&
      tomorrowDay === StudentTomorrowDay
    );
  });
  if (studentsTomorrow.length) {
    studentsTomorrow.forEach((element) => {
      ctx.reply(
        `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${
          element.lastName
        } –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è \n –õ–æ–∫–∞—Ü–∏—è: ${
          element.typeBootCamp === "moscow"
            ? "–ú–æ—Å–∫–≤–∞"
            : element.typeBootCamp === "spb"
            ? "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            : "–û–Ω–ª–∞–π–Ω"
        }.`
      );
    });
  } else {
    await ctx.reply("–ó–∞–≤—Ç—Ä–∞ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è");
  }
});

bot.on("sticker", (ctx) => ctx.reply("üëç"));

bot.launch();

// Code for the command tomorrow
// ctx.reply(new Date().getDate());

//   let today = new Date().toDateString().split(" ")
//   let newMonthTomorrow = false;
//   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
//   if (today[1] === 'Feb' && today[3] % 4 === 0 && today[2] === '29') {
//     newMonthTomorrow = true;
//   } else if (today[1] === 'Sep' || today[1] === 'Apr' || today[1] === 'Jun' || today[1] === 'Nov' && Number(today[2]) === 30) {
//     newMonthTomorrow = true
//   } else if (today[2] === '31') {
//     newMonthTomorrow = true
//   } else if (today[1] === 'Feb' && today[2] === '28') {
//     newMonthTomorrow = true
//   }
// // –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ - –Ω–µ –Ω–æ–≤—ã–π –º–µ—Å—è—Ü...
//   if (!newMonthTomorrow) {
//     // –ö–ª–∞–¥–µ–º –≤ tomorrow —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
//     let tomorrow = [today[1], Number(today[2]) + 1];
//     let [tomorrowMonth, tomorrowDay] = [tomorrow[0], tomorrow[1]]
//     let students = await Student.find();
//     let studentsToday = students.filter((student) => {
//       let studentDate = student.dateOfBirth.toDateString().split(" ");
//       [studentBDMonth, studentBDDay] = [studentDate[1], studentDate[2]];
//       return tomorrowMonth === studentBDMonth && tomorrowDay === Number(studentBDDay);
//     });
//     if (studentsToday.length) {
//       studentsToday.forEach((element) => {
//         ctx.reply(
//           `–£ —Å—Ç—É–¥–µ–Ω—Ç–∞ ${element.firstName} ${element.lastName} –∑–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è. –õ–æ–∫–∞—Ü–∏—è: ${element.typeBootCamp === 'moscow' ? '–ú–æ—Å–∫–≤–∞' : element.typeBootCamp === 'spb' ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' : '–û–Ω–ª–∞–π–Ω'}.`
//         );
//       })} else {
//       await ctx.reply('–ó–∞–≤—Ç—Ä–∞ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è')
//     }
//   } else {
//     // –ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
//     // *************************************
//     console.log("–≠–¢–û –ù–ê–î–û –ë–£–î–ï–¢ –î–û–ü–ò–°–ê–¢–¨")
//     await ctx.reply('–°–æ—Ä–∏, –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
//     // *************************************
//   }
